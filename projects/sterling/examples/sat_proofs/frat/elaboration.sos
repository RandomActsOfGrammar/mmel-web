Module sat_proofs:frat

/*
  Note on elaboration:
  The second pass in FRAT elaboration is done after we have produced
  only LRAT clauses.  This part is not extensibly interesting because
  of this, so we do not define it here.
*/

/*
  In elaboration, we work backward and don't initially know if a
  clause will be necessary, so we mark it as unknown.  Once we find a
  use of it, we mark it as needed.  If it is still marked as unknown
  once we reach where it was added, we know it is not needed and can
  drop it.
*/
clauseUsedness ::= needed | unknown
Translation clauseUsedness :

                /*clauses coming down, original proof, clauses needed,
                  output proof*/
Judgment elaborate : {[(int, clause)] proof* [(int, clauseUsedness)]
                      proof}


endKnownClauses FC Needed
select (ID, needed) NRest Needed
rupProof Known emptyClause Prf
makeUsed NRest Prf Updated
---------------------------------------- [Ela-EndFrat]
{elaborate Known endFrat(ID, FC) Updated
           emptyLrat(ID, Prf)}


endKnownClauses FC Needed
select (ID, needed) NRest Needed
makeUsed NRest Prf Updated
------------------------------------------------ [Ela-EndFratPrf]
{elaborate Known endFratPrf(ID, Prf, FC) Updated
             emptyLrat(ID, Prf)}


/*Note we do not have rules for proof endings without the set of final
  clauses.  This is because we need the final clauses for the
  elaboration step to know the remaining clauses.*/


select (ID, C) KRest Known
elaborate KRest Rest Needed ERest
----------------------------------------- [Ela-DeleteFrat]
{elaborate Known deleteFrat(ID, C, Rest)
             (ID, unknown)::Needed ERest}
/*Add as unknown because this is the first time we've seen it, going
  thourgh the proof backward, so we don't know if it is used*/


select (ID, C) KRest Known
elaborate KRest Rest Needed ERest
------------------------------------------ [Ela-DeleteLratProof]
{elaborate Known deleteLratProof(ID, Rest)
           (ID, unknown)::Needed ERest}


remove_all Known ID KRest
elaborate (ID, C)::KRest Rest Needed ERest
select (ID, needed) NRest Needed
makeUsed NRest Prf Updated
--------------------------------------------- [Ela-AddLrupProofNeeded]
{elaborate Known
     addLrupProof(ID, C, Prf, Rest)
     Updated addLrupProof(ID, C, Prf, ERest)}


remove_all Known ID KRest
elaborate (ID, C)::KRest Rest Needed ERest
select (ID, unknown) NRest Needed
------------------------------------------ [Ela-AddLrupProofUnknown]
{elaborate Known
     addLrupProof(ID, C, Prf, Rest)
     NRest ERest}


remove_all Known ID KRest
elaborate (ID, C)::KRest Rest Needed ERest
select (ID, needed) NRest Needed
rupProof Known C Prf
makeUsed NRest Prf Updated
-------------------------------------------- [Ela-AddProoflessNeeded]
{elaborate Known addProofless(ID, C, Rest)
    Updated addLrupProof(ID, C, Prf, ERest)}


remove_all Known ID KRest
elaborate (ID, C)::KRest Rest Needed ERest
select (ID, unknown) NRest Needed
------------------------------------------ [Ela-AddProoflessUnknown]
{elaborate Known addProofless(ID, C, Rest)
           NRest ERest}


select (From, C) KRest Known
elaborate (To, C)::KRest Rest Needed ERest
select (To, needed) NRest Needed
----------------------------------------------- [Ela-RelocateNeeded]
{elaborate Known relocateClause(From, To, Rest)
           (From, needed)::NRest
           relocateClause(From, To, ERest)}


select (From, C) KRest Known
elaborate (To, C)::KRest Rest Needed ERest
select (To, unknown) NRest Needed
----------------------------------------------- [Ela-RelocateUnknown]
{elaborate Known relocateClause(From, To, Rest)
           (From, unknown)::NRest ERest}


elaborate Known Rest Needed ERest
-------------------------------------------------------- [Ela-Comment]
elaborate Known commentProof(Comment, Rest) Needed ERest


Known |{proof}- P ~~> PT
elaborate Known PT Needed EP
---------------------------- [Ela-Trans]*
elaborate Known P Needed EP





/*produce the set of clauses known at the end of the proof*/
Judgment endKnownClauses : finalClauses* [(int, clauseUsedness)]


----------------------------- [EKC-End]
endKnownClauses endFClause []


isEmpty C
endKnownClauses Rest KRest
---------------------------------------- [EKC-AddEmpty]
{endKnownClauses addFClause(ID, C, Rest)
                 (ID, needed)::KRest}


!isEmpty C
endKnownClauses Rest KRest
----------------------------------------- [EKC-AddNonEmpty]
{endKnownClauses addFClause(ID, C, Rest)
                 (ID, unknown)::KRest}





/*
  This relation permits us to have empty-ish clause constructors from
  other extensions that still work here
*/
Judgment isEmpty : clause*

------------------- [IsEmpty-EmptyClause]
isEmpty emptyClause


|{clause}- C ~~> CT
isEmpty CT
------------------- [IsEmpty-Trans]*
isEmpty C





/*Mark everything in the proof as needed
  {original known clauses, proof, updated clauses}*/
Fixed Judgment makeUsed : {[(int, clauseUsedness)] [int]
                           [(int, clauseUsedness)]}

======================= [MU-Nil]
makeUsed Known [] Known


select (ID, needed) KRest Known
makeUsed KRest Rest KOut
========================================== [MU-ConsNeeded]
makeUsed Known ID::Rest (ID, needed)::KOut


select (ID, unknown) KRest Known
makeUsed KRest Rest KOut
========================================== [MU-ConsUnknown]
makeUsed Known ID::Rest (ID, needed)::KOut


/*Add the delete clauses to the given proof
 {known clauses, clause ID's to delete, original proof, output proof}*/
Fixed Judgment addDeletes : [int] proof proof

================= [AD-Nil]
addDeletes [] P P


addDeletes Rest P PRest
================================================ [AD-Cons]
addDeletes ID::Rest P deleteLratProof(ID, PRest)
