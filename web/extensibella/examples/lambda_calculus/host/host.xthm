Module lambda_calculus:host.

Projection_Constraint proj_is : forall E E',
  |{e}- E ~~> E' -> is_e E -> is_e E'.


%Generally a good idea to include this so extensions can prove things
%based on the structure of a term
Proj_Rel is_e E.
Ext_Ind forall E, is_e E.
%var
 search.
%abs
 apply IH to R2. search.
%app
 apply IH to R1. apply IH to R2. search.


Projection_Constraint proj_same : forall E E1 E2,
  |{e}- E ~~> E1 -> |{e}- E ~~> E2 -> E1 = E2.


Extensible_Theorem
  subst_exists : forall X R E,
    IsE : is_e E ->
    IsX : is_string X ->
    IsR : is_e R ->
    exists S, subst X R E S
  on IsE.
%var
 Or: apply is_string_eq_or_not to IsX IsE1. Eq: case Or.
   %X = S
    search.
   %X != S
    search.
%abs
 Or: apply is_string_eq_or_not to IsX IsE1. Eq: case Or.
   %X = S
    search.
   %X != S
    apply IH to IsE2 IsX IsR. search.
%app
 apply IH to IsE1 IsX IsR. apply IH to IsE2 IsX IsR. search.


Extensible_Theorem
  subst_is : forall X R E S,
    IsE : is_e E ->
    IsX : is_string X ->
    IsR : is_e R ->
    S : subst X R E S ->
    is_e S
  on S.
%S-Var-Eq
 search.
%S-Var-NEq
 search.
%S-Abs-Eq
 search.
%S-Abs-NEq
 Is: case IsE. apply IH to _ _ _ S2. search.
%S-App
 Is: case IsE. apply IH to _ _ _ S1. apply IH to _ _ _ S2. search.


Extensible_Theorem
  eval_is : forall E V,
    IsE : is_e E ->
    Ev : eval E V ->
    is_e V
  on Ev.
%E-Abs
 search.
%E-App
 Is: case IsE. IsAbs: apply IH to _ Ev1. apply IH to _ Ev2.
 case IsAbs. apply subst_is to _ _ _ Ev3. apply IH to _ Ev4. search.


Extensible_Theorem
  subst_unique : forall X R E SA SB,
    IsE : is_e E ->
    IsX : is_string X ->
    IsR : is_e R ->
    SA : subst X R E SA ->
    SB : subst X R E SB ->
    SA = SB
  on SA.
%S-Var-Eq
 SB: case SB.
   %S-Var-Eq
    search.
   %S-Var-NEq
    apply SB to _.
%S-Var-NEq
 SB: case SB.
   %S-Var-Eq
    apply SA1 to _.
   %S-Var-NEq
    search.
%S-Abs-Eq
 SB: case SB.
   %S-Abs-Eq
    search.
   %S-Abs-NEq
    apply SB to _.
%S-Abs-NEq
 SB: case SB.
   %S-Abs-Eq
    apply SA1 to _.
   %S-Abs-NEq
    Is: case IsE. apply IH to _ _ _ SA2 SB1. search.
%S-App
 Is: case IsE. SB: case SB. apply IH to _ _ _ SA1 SB.
 apply IH to _ _ _ SA2 SB1. search.


Extensible_Theorem
  eval_unique : forall E VA VB,
    IsE : is_e E ->
    EvA : eval E VA ->
    EvB : eval E VB ->
    VA = VB
  on EvA.
%E-Abs
 EvB: case EvB. search.
%E-App
 Is: case IsE. EvB: case EvB. apply IH to _ EvA1 EvB.
 apply IH to _ EvA2 EvB1. IsAbs: apply eval_is to _ EvA1. case IsAbs.
 apply eval_is to _ EvA2. apply subst_is to _ _ _ EvA3.
 apply subst_unique to _ _ _ EvA3 EvB2. apply IH to _ EvA4 EvB3.
 search.


%anything evaluation-related must be the same across projection
Projection_Constraint proj_subst : forall X R E S E',
  Proj : |{e}- E ~~> E' ->
  IsE : is_e E ->
  IsX : is_string X ->
  IsR : is_e R ->
  S : subst X R E S ->
  exists S', subst X R E' S'.
Projection_Constraint proj_subst_same : forall X R E S E' S',
  Proj : |{e}- E ~~> E' ->
  IsE : is_e E ->
  isX : is_string X ->
  IsR : is_e R ->
  S : subst X R E S ->
  S' : subst X R E' S' ->
  S = S'.

Projection_Constraint proj_eval : forall E E' V,
  Proj : |{e}- E ~~> E' ->
  IsE : is_e E ->
  Ev : eval E V ->
  exists V', eval E' V'.
Projection_Constraint proj_eval_same : forall E E' V V',
  Proj : |{e}- E ~~> E' ->
  IsE : is_e E ->
  Ev : eval E V ->
  Ev' : eval E' V' ->
  V = V'.


Ext_Size eval E V.
Proj_Rel eval E V.

Ext_Ind forall E V, eval E V.
%E-Abs
 search.
%E-App
 apply ext_size_is_int_eval to R3. apply ext_size_is_int_eval to R4.
 apply ext_size_is_int_eval to R6. apply ext_size_pos_eval to R3.
 apply ext_size_pos_eval to R4. apply ext_size_pos_eval to R6.
 Or2: apply lt_left to R2 _ _. Or4: apply lt_right to R2 _ _ _.
 apply lesseq_integer__add_positive to _ _ R2.
 Or3: apply lt_left to R1 _ _. apply plus_integer_is_integer to _ _ R2.
 LeN5: apply lte_right to R1 _ _ _. A: case Acc (keep). Or2: case Or2.
   %N2 < N5
    LN2: apply less_lesseq_integer_transitive to Or2 LeN5.
    AN2: apply A to _ LN2. apply IH to R4 AN2. Or4: case Or4.
      %N4 < N5
       LN4: apply less_lesseq_integer_transitive to Or4 LeN5.
       AN4: apply A to _ LN4. apply IH to R6 AN4. Or3: case Or3.
         %N3 < N
          AN3: apply A to _ Or3. apply IH to R3 AN3. search.
         %N3 = N
          apply IH1 to R3 Acc. search.
      %N4 = N5
       Or5: apply lesseq_integer_less_or_eq to LeN5. Or5: case Or5.
         %N5 < N
          AN5: apply A to _ Or5. apply IH to R6 AN5. Or3: case Or3.
            %N3 < N
             AN3: apply A to _ Or3. apply IH to R3 AN3. search.
            %N3 = N
             apply IH1 to R3 Acc. search.
         %N5 = N
          apply IH1 to R6 Acc. Or3: case Or3.
            %N3 < N
             AN3: apply A to _ Or3. apply IH to R3 AN3. search.
            %N3 = N
             apply IH1 to R3 Acc. search.
   %N2 = N5
    Or5: apply lesseq_integer_less_or_eq to LeN5. Or5: case Or5.
      %N5 < N
       AN5: apply A to _ Or5. apply IH1 to R4 AN5. Or4: case Or4.
         %N4 < N5
          LN4: apply less_integer_transitive to Or4 Or5.
          AN4: apply A to _ LN4. apply IH to R6 AN4. Or3: case Or3.
            %N3 < N
             AN3: apply A to _ Or3. apply IH to R3 AN3. search.
            %N3 = N
             apply IH1 to R3 Acc. search.
         %N4 = N5
          apply IH to R6 AN5. Or3: case Or3.
            %N3 < N
             AN3: apply A to _ Or3. apply IH to R3 AN3. search.
            %N3 = N
             apply IH1 to R3 Acc. search.
      %N5 = N
       apply IH1 to R4 Acc. Or4: case Or4.
         %N4 < N
          AN4: apply A to _ Or4. apply IH to R6 AN4. Or3: case Or3.
            %N3 < N
             AN3: apply A to _ Or3. apply IH to R3 AN3. search.
            %N3 = N
             apply IH1 to R3 Acc. search.
         %N4 = N
          apply IH1 to R6 Acc. Or3: case Or3.
            %N3 < N
             AN3: apply A to _ Or3. apply IH to R3 AN3. search.
            %N3 = N
             apply IH1 to R3 Acc. search.
