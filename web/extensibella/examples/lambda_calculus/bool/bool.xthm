Module lambda_calculus:bool.


Prove_Constraint lambda_calculus:host:trans_is.
%true
 search 6.
%false
 search 6.
%if
 case Hyp1. search.


Prove_Ext_Ind lambda_calculus:host:is_e.
%true
 unfold. exists abs "a" (abs "b" (var "a")). search 7.
%false
 unfold. exists abs "a" (abs "b" (var "b")). search 7.
%if
 apply IH to R1. apply IH to R2. apply IH to R3. search.


Prove_Constraint lambda_calculus:host:trans_same.
%true
 case Hyp1. search.
%false
 case Hyp1. search.
%if
 case Hyp1. search.


Prove lambda_calculus:host:subst_exists.
%true
 search.
%false
 search.
%if
 apply IH to IsE1 _ IsR. apply IH to IsE2 _ IsR.
 apply IH to IsE3 _ IsR. search.


Prove lambda_calculus:host:subst_is.
%S-True
 search 7.
%S-False
 search 7.
%S-If
 Is: case IsE. apply IH to _ _ _ S1. apply IH to _ _ _ S2.
 apply IH to _ _ _ S3. search.


Prove lambda_calculus:host:eval_is.
%E-True
 search 7.
%E-False
 search 7.
%E-If
 Is: case IsE. IsC: apply IH to _ Ev1. search.


Prove lambda_calculus:host:subst_unique.
%S-True
 case SB. search.
%S-False
 case SB. search.
%S-If
 SB: case SB. Is: case IsE. apply IH to _ _ _ SA1 SB.
 apply IH to _ _ _ SA2 SB1. apply IH to _ _ _ SA3 SB2. search.


Prove lambda_calculus:host:eval_unique.
%E-True
 case EvB. search.
%E-False
 case EvB. search.
%E-If
 EvB: case EvB. Is: case IsE. apply IH to _ EvA1 EvB. search.


Prove_Constraint lambda_calculus:host:trans_subst.
%true
 OrA: apply is_string_eq_or_not to IsX _ with S2 = "a".
 OrB: apply is_string_eq_or_not to IsX _ with S2 = "b". A: case OrA.
   %X = "a"
    search.
   %X != "a"
    B: case OrB.
      %X = "b"
       search.
      %X != "b"
       search.
%false
 OrA: apply is_string_eq_or_not to IsX _ with S2 = "a".
 OrB: apply is_string_eq_or_not to IsX _ with S2 = "b". A: case OrA.
   %X = "a"
    search.
   %X != "a"
    B: case OrB.
      %X = "b"
       search.
      %X != "b"
       search.
%if
 Is: case IsE. S: case S. search.


Prove_Constraint lambda_calculus:host:trans_subst_same.
%true
 case S. S': case S'.
   %S-Abs-Eq
    search.
   %S-Abs-NEq
    T: case S'1.
      %S-Abs-Eq
       search.
      %S-Abs-NEq
       U: case T1.
         %S-Var-Eq
          apply S' to _.
         %S-Var-NEq
          search.
%false
 case S. S': case S'.
   %S-Abs-Eq
    search.
   %S-Abs-NEq
    T: case S'1.
      %S-Abs-Eq
       search.
      %S-Abs-NEq
       U: case T1.
         %S-Var-Eq
          apply T to _.
         %S-Var-NEq
          search.
%if
 S: case S. S': case S'. S'': case S'. Is: case IsE.
 apply subst_unique to _ _ _ S S''.
 apply subst_unique to _ _ _ S1 S''1.
 apply subst_unique to _ _ _ S2 S'1. search.


Prove_Constraint lambda_calculus:host:trans_eval.
%true
 search.
%false
 search.
%if
 Ev: case Ev. search.


Prove_Constraint lambda_calculus:host:trans_eval_same.
%true
 case Ev. case Ev'. search.
%false
 case Ev. case Ev'. search.
%if
 Ev: case Ev. case IsE. apply eval_unique to _ Ev' Ev. search.


Add_Ext_Size lambda_calculus:host:eval.


Prove_Ext_Ind lambda_calculus:host:eval.
%true
 unfold. exists abs "a" (abs "b" (var "a")). search 7.
%false
 unfold. exists abs "a" (abs "b" (var "b")). search 7.
%if
 apply ext_ind_is_int_eval to R2. L: apply lt_plus_one to R1 _.
 apply ext_ind_pos_eval to R2. Acc: case Acc. A: apply Acc to _ L.
 apply IH to R2 A. exists app (app Cond T) F. search.
