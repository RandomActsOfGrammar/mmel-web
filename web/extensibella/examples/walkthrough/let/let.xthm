Module walkthrough:let.

Prove walkthrough:host:typeOf_unique.
%T-Let
 TyB: case TyB. apply IH to TyA1 TyB. apply IH to TyA2 TyB1. search.


Prove walkthrough:host:ty_lookup.
%T-Let
 apply IH to Ty1 L. apply IH to Ty2 _ with Ctx2 = (X, Ty1)::Ctx2.
   intros Lkp. Lkp: case Lkp.
     %Lkp-Here
      search.
     %Lkp-Later
      apply L to Lkp1. search.
 search.


Prove walkthrough:host:subst_type_preservation.
%S-Let-NEq
 Ty: case TTy. apply IH to Ty S2 RTy.
 Ty': apply ty_lookup to Ty1 _ with Ctx2 = (X, XTy)::(Y, Ty1)::Ctx.
   intros L. L: case L.
     %Lkp-Here
      search.
     %Lkp-Later
      L: case L1.
        %Lkp-Here
         search.
        %Lkp-Later
         search.
 apply IH to Ty' S3 RTy. search.
%S-Let-Eq
 Ty: case TTy. apply IH to Ty S1 RTy.
 apply ty_lookup to Ty1 _ with Ctx2 = (X, Ty1)::Ctx.
   intros L. L: case L.
     %Lkp-Here
      search.
     %Lkp-Later
      L: case L1.
        %Lkp-Here
         apply L to _.
        %Lkp-Later
         search.
 search.


Prove walkthrough:host:type_preservation.
%E-Let-Step
 Ty: case Ty. apply IH to Ty Ev1. search.
%E-Let-Subst
 Ty: case Ty. apply subst_type_preservation to Ty1 Ev2 Ty. search.


Prove_Constraint walkthrough:host:proj_type_same.
%Proj-Let
 case Hyp1. apply typeOf_unique to Hyp2 H1. search.


Add_Ext_Size walkthrough:host:eval.


Add_Proj_Rel walkthrough:host:eval.


Prove_Ext_Ind walkthrough:host:eval.
%E-Let-Step
 Acc: case Acc. unfold. Ty: case Ty.
 assert G |{tm}- let X T1 T2 ~~> app (abs X Ty1 T2) T1.
 IsN2: apply ext_size_is_int_eval to R2.
 L: apply lt_plus_one to R1 _. PosN2: apply ext_size_pos_eval to R2.
 A: apply Acc to PosN2 L. apply IH to R2 A Ty. search.
%E-Let-Subst
 unfold. Ty: case Ty.
 assert G |{tm}- let X T1 T2 ~~> app (abs X Ty1 T2) T1. search.
