Module walkthrough:let.

Prove walkthrough:host:typeOf_unique.
%T-Let
 TyB: case TyB. apply IH to TyA1 TyB. apply IH to TyA2 TyB1. search.


Prove walkthrough:host:ty_lookup.
%T-Let
 apply IH to Ty1 L. apply IH to Ty2 _ with Ctx2 = (X, Ty1)::Ctx2.
   intros Lkp. Lkp: case Lkp.
     %Lkp-Here
      search.
     %Lkp-Later
      apply L to Lkp1. search.
 search.


Prove walkthrough:host:subst_type_preservation.
%S-Let-NEq
 Ty: case TTy. apply IH to Ty S2 RTy.
 Ty': apply ty_lookup to Ty1 _ with Ctx2 = (X, XTy)::(Y, Ty1)::Ctx.
   intros L. L: case L.
     %Lkp-Here
      search.
     %Lkp-Later
      L: case L1.
        %Lkp-Here
         search.
        %Lkp-Later
         search.
 apply IH to Ty' S3 RTy. search.
%S-Let-Eq
 Ty: case TTy. apply IH to Ty S1 RTy.
 apply ty_lookup to Ty1 _ with Ctx2 = (X, Ty1)::Ctx.
   intros L. L: case L.
     %Lkp-Here
      search.
     %Lkp-Later
      L: case L1.
        %Lkp-Here
         apply L to _.
        %Lkp-Later
         search.
 search.


Prove walkthrough:host:type_preservation.
%E-Let-Step
 Ty: case Ty. apply IH to Ty Ev1. search.
%E-Let-Subst
 Ty: case Ty. apply subst_type_preservation to Ty1 Ev2 Ty. search.


Prove_Constraint walkthrough:host:trans_type_same.
%Trans-Let
 case Hyp1. apply typeOf_unique to Hyp2 H1. search.


Add_Ext_Size walkthrough:host:typeOf.


Prove_Ext_Ind walkthrough:host:typeOf.
%T-Let
 Acc: case Acc. unfold. apply drop_ext_ind_typeOf to R3.
 assert G |{tm}- let X T1 T2 ~~> app (abs X Ty1 T2) T1.
 IsN2: apply ext_ind_is_int_typeOf to R3.
 IsN3: apply ext_ind_is_int_typeOf to R4.
 IsN4: apply plus_integer_is_integer to _ _ R2.
 L: apply lt_plus_one to R1 _.
 PosN2: apply ext_ind_pos_typeOf to R3.
 PosN3: apply ext_ind_pos_typeOf to R4.
 Or2: apply lt_left to R2 _ _. Or3: apply lt_right to R2 _ _ _.
 Or2: case Or2.
   %N2 < N4
    LN2: apply less_integer_transitive to Or2 L.
    AN2: apply Acc to _ LN2. apply IH1 to R3 AN2. Or3: case Or3.
      %N3 < N4
       LN3: apply less_integer_transitive to Or3 L.
       AN3: apply Acc to _ LN3. apply IH1 to R4 AN3. search.
      %N3 = N4
       AN4: apply Acc to _ L. apply IH1 to R4 AN4. search.
   %N2 = N4
    AN4: apply Acc to _ L. apply IH1 to R3 AN4. Or3: case Or3.
      %N3 < N4
       LN3: apply less_integer_transitive to Or3 L.
       AN3: apply Acc to _ LN3. apply IH1 to R4 AN3. search.
      %N3 = N4
       apply IH1 to R4 AN4. search.
