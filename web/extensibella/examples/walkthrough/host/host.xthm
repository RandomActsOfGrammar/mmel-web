Module walkthrough:host.

Extensible_Theorem
  typeOf_unique : forall Ctx T TyA TyB,
    TyA : typeOf Ctx T TyA ->
    TyB : typeOf Ctx T TyB ->
    TyA = TyB
  on TyA.
%T-Var
 TyB: case TyB. apply lookup_unique to TyA1 TyB. search.
%T-Abs
 TyB: case TyB. apply IH to TyA1 TyB. search.
%T-App
 TyB: case TyB. apply IH to TyA1 TyB. apply IH to TyA2 TyB1. search.


Extensible_Theorem
  ty_lookup : forall Ctx1 Ctx2 T Ty,
    Ty : typeOf Ctx1 T Ty ->
    L : (forall X XTy, lookup Ctx1 X XTy -> lookup Ctx2 X XTy) ->
    typeOf Ctx2 T Ty
  on Ty.
%T-Var
 apply L to Ty1. search.
%T-Abs
 apply IH to Ty1 _ with Ctx2 = (X, Ty1)::Ctx2.
   intros LkpX. LkpX: case LkpX.
     %Lkp-Here
      search.
     %Lkp-Later
      apply L to LkpX1. search.
 search.
%T-App
 apply IH to Ty1 L. apply IH to Ty2 L. search.


Theorem empty_ty_any : forall T Ty Ctx,
  typeOf [] T Ty -> typeOf Ctx T Ty.
intros T. backchain ty_lookup. intros L. case L.


Extensible_Theorem
  subst_type_preservation : forall T Ctx X XTy Ty R S,
    TTy : typeOf ((X, XTy)::Ctx) T Ty ->
    S : subst X R T S ->
    RTy : typeOf [] R XTy ->
    typeOf Ctx S Ty
  on S.
%S-Var-NEq
 Ty: case TTy. Lkp: case Ty.
   %Lkp-Here
    apply S1 to _.
   %Lkp-Later
    search.
%S-Var-Eq
 Ty: case TTy. L: case Ty.
   %Lkp-Here
    backchain empty_ty_any.
   %Lkp-Later
    apply L to _.
%S-Abs-NEq
 Ty: case TTy.
 Ty': apply ty_lookup to Ty _ with Ctx2 = (X, XTy)::(Y, Ty1)::Ctx.
   intros L. L: case L.
     %Lkp-Here
      search.
     %Lkp-Later
      L: case L1.
        %Lkp-Here
         search.
        %Lkp-Later
         search.
 apply IH to Ty' S2 _. search.
%S-Abs-Eq
 Ty: case TTy. apply ty_lookup to Ty _ with Ctx2 = (X, Ty1)::Ctx.
   intros L. L: case L.
     %Lkp-Here
      search.
     %Lkp-Later
      L: case L1.
        %Lkp-Here
         apply L to _.
        %Lkp-Later
         search.
 search.
%S-App
 Ty: case TTy. apply IH to Ty S1 _. apply IH to Ty1 S2 _. search.


Extensible_Theorem
  type_preservation : forall T Ty T',
    Ty : typeOf [] T Ty ->
    Ev : eval T T' ->
    typeOf [] T' Ty
  on Ev.
%E-App-Step1
 Ty: case Ty. apply IH to Ty Ev1. search.
%E-App-Step2
 Ty: case Ty. apply IH to Ty1 Ev2. search.
%E-App-Subst
 Ty: case Ty. Ty: case Ty.
 apply subst_type_preservation to Ty Ev2 Ty1. search.


Projection_Constraint proj_type_same : forall G T Ty T_T,
  G |{tm}- T ~~> T_T -> typeOf G T Ty -> typeOf G T_T Ty.


Ext_Size typeOf G T Ty.

Ext_Ind forall G T Ty, typeOf G T Ty.
%T-Var
 search.
%T-Abs
 apply IH1 to R1 Acc. search.
%T-App
 apply ext_size_is_int_typeOf to R2. apply ext_size_is_int_typeOf to R3.
 apply ext_size_pos_typeOf to R2. apply ext_size_pos_typeOf to R3.
 Or2: apply lt_left to R1 _ _. Or3: apply lt_right to R1 _ _ _.
 A: case Acc (keep). Or2: case Or2.
   %N2 < N
    AN2: apply A to _ Or2. apply IH to R2 AN2. Or3: case Or3.
      %N3 < N
       AN3: apply A to _ Or3. apply IH to R3 AN3. search.
      %N3 = N
       apply IH1 to R3 Acc. search.
   %N2 = N
    apply IH1 to R2 Acc. Or3: case Or3.
      %N3 < N
       AN3: apply A to _ Or3. apply IH to R3 AN3. search.
      %N3 = N
       apply IH1 to R3 Acc. search.
