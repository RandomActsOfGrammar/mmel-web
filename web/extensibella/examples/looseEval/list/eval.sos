Module looseEval:list

/********************************************************************
 Expression Evaluation
 ********************************************************************/

-------------------------------- [E-Nil]
evalExpr FE EE nil(Ty) nilVal []


evalExpr FE EE E1 V1 O1
evalExpr FE EE E2 V2 O2
O1 ++ O2 = O
--------------------------------------------- [E-Cons]
evalExpr FE EE cons(E1, E2) consVal(V1, V2) O


evalExpr FE EE E consVal(Hd, Tl) O
---------------------------------- [E-Head]
evalExpr FE EE head(E) Hd O


evalExpr FE EE E consVal(Hd, Tl) O
---------------------------------- [E-Tail]
evalExpr FE EE tail(E) Tl O


evalExpr FE EE E nilVal O
-------------------------------- [E-Null-True]
evalExpr FE EE null(E) trueVal O


evalExpr FE EE E consVal(Hd, Tl) O
---------------------------------- [E-Null-False]
evalExpr FE EE null(E) falseVal O


evalExpr FE EE L LV O1
evalExpr FE EE I intVal(Idx) O2
listIndex LV Idx V
O1 ++ O2 = O
------------------------------- [E-Index]
evalExpr FE EE index(L, I) V O


evalExpr FE EE E V O
listLength V I
------------------------------------ [E-Length]
evalExpr FE EE length(E) intVal(I) O


/*we make these fixed because there aren't any other type of list
  values that it would make sense to add; they are already precluded
  by the definitions above, like E-Null-*, E-Head, E-Tail*/
Fixed Judgment listIndex : value int value
Fixed Judgment listLength : value int

============================ [LI-0]
listIndex consVal(V, Tl) 0 V


N - 1 = I
listIndex Tl I V
============================= [LI-Step]
listIndex consVal(Hd, Tl) N V



=================== [LL-Nil]
listLength nilVal 0


listLength Tl I
I + 1 = N
============================ [LL-Cons]
listLength consVal(Hd, Tl) N



/********************************************************************
 Statement Evaluation
 ********************************************************************/

lookupScopes L EE LV
evalExpr FE EE I intVal(N) O1
evalExpr FE EE E V O2
updateListIndex LV N V LV2 /*make the new list*/
replaceScopes L LV2 EE EE1 /*put it in its place*/
O1 ++ O2 = O
---------------------------------------- [E-ListUpdate]
evalStmt FE EE listUpdate(L, I, E) EE1 O


evalExpr FE EE L LV O1
iterateList FE EE LV X Body EE1 O2
O1 ++ O2 = O
-------------------------------------------- [E-ListForeach]
evalStmt FE EE listForeach(X, L, Body) EE1 O



                  /*original list, index, new value, new list*/
Fixed Judgment updateListIndex : value int value value

========================================================== [ULI-0]
updateListIndex consVal(VOld, Tl) 0 VNew consVal(VNew, Tl)


N - 1 = I
updateListIndex Tl I V TlNew
==================================================== [ULI-Step]
updateListIndex consVal(X, Tl) N V consVal(X, TlNew)



/*execute the body once for each element of the list:
     iterateList (fun ctx) (init eval ctx) (list val) (name for list elements)
                 (loop body) (final eval ctx) (printed output)*/
Judgment iterateList : {[(string, (string, value, [string], stmt))] [[(string, value)]]
                        value* string stmt [[(string, value)]] [value]}

------------------------------------- [IL-Nil]
iterateList FE EE nilVal X Body EE []


evalStmt FE [(X, Hd)]::EE Body Scope::EE1 O1
iterateList FE EE1 Tl X Body EE2 O2
O1 ++ O2 = O
---------------------------------------------- [IL-Cons]
iterateList FE EE consVal(Hd, Tl) X Body EE2 O


/*
  Why don't we have an actual rule, perhaps projecting V and iterating
  over that?  That doesn't work because the use of null in the
  condition of the while loop to which listForeach projects does not
  look through the projection, and thus we cannot prove what we need
  for Ext_Ind for listForeach.
*/
1 = 0
-------------------------------- [IL-Default]*
iterateList FE EE V X Body EE1 O
