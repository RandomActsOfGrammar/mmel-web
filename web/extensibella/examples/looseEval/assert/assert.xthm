Module looseEval:assert.


Prove_Constraint looseEval:host:proj_expr_unique.
Prove_Constraint looseEval:host:proj_expr_is.

Prove_Constraint looseEval:host:proj_stmt_unique.
case PrB. search.
Prove_Constraint looseEval:host:proj_stmt_is.
case IsS. search.
Prove_Constraint looseEval:host:proj_stmt_other.
search.

Prove_Constraint looseEval:host:proj_fun_unique.
Prove_Constraint looseEval:host:proj_fun_is.

Prove_Constraint looseEval:host:proj_param_unique.
Prove_Constraint looseEval:host:proj_param_is.

Prove_Constraint looseEval:host:proj_program_unique.
Prove_Constraint looseEval:host:proj_program_is.

Prove_Constraint looseEval:host:proj_typ_unique.
Prove_Constraint looseEval:host:proj_typ_is.

Prove_Constraint looseEval:host:proj_value_unique.
Prove_Constraint looseEval:host:proj_value_is.



/********************************************************************
 Decidable Equality
 ********************************************************************/
Add_Proj_Rel looseEval:host:is_expr,
             looseEval:host:is_args,
             looseEval:host:is_recFieldExprs.
Prove_Ext_Ind looseEval:host:is_expr,
              looseEval:host:is_args,
              looseEval:host:is_recFieldExprs.

Add_Proj_Rel looseEval:host:is_stmt.
Prove_Ext_Ind looseEval:host:is_stmt.
search.

Prove looseEval:host:is_args_nilArgs_or_consArgs.
Prove looseEval:host:is_recFieldExprs_nilRecFieldExprs_or_consRecFieldExprs.

Add_Proj_Rel looseEval:host:is_value, looseEval:host:is_recFieldVals.
Prove_Ext_Ind looseEval:host:is_value, looseEval:host:is_recFieldVals.
Prove looseEval:host:is_value_intVal_or_not.
Prove looseEval:host:is_value_trueVal_or_not.
Prove looseEval:host:is_value_falseVal_or_not.
Prove looseEval:host:is_value_stringVal_or_not.
Prove looseEval:host:is_value_recVal_or_not.

Prove looseEval:host:is_recFieldVals_nil_or_cons.

Prove looseEval:host:is_value_eq_or_not,
      looseEval:host:is_recFieldVals_eq_or_not.



/********************************************************************
 Variables
 ********************************************************************/
Prove looseEval:host:vars_unique.
Prove looseEval:host:vars_is.
Prove looseEval:host:vars_exist,
      looseEval:host:varsArgs_exist,
      looseEval:host:varsRecFields_exist.
Prove_Constraint looseEval:host:proj_vars.



/********************************************************************
 Typing
 ********************************************************************/
Prove looseEval:host:typeOf_isTy.

Prove looseEval:host:stmtOK_isCtx.
search.
Prove looseEval:host:stmtOK_keep_scopes.
search.
Prove looseEval:host:stmtOK_older_scopes_same.
search.
Prove looseEval:host:stmtOK_first_scope_lookup_same.
search.

Prove looseEval:host:typeOf_unique.

Prove looseEval:host:stmtOK_unique.
case TyB. search.

Prove looseEval:host:paramTy_is.
Prove looseEval:host:getFunInfo_is.
Prove looseEval:host:paramTy_exists.
Prove looseEval:host:getFunInfo_exists.



/********************************************************************
 Evaluation
 ********************************************************************/
Prove looseEval:host:evalExpr_isValue,
      looseEval:host:evalStmt_isCtx,
      looseEval:host:evalArgs_isValue,
      looseEval:host:evalRecFields_isValue.
search.

Prove looseEval:host:evalExpr_isOutput,
      looseEval:host:evalStmt_isOutput,
      looseEval:host:evalArgs_isOutput,
      looseEval:host:evalRecFields_isOutput.
case IsS. apply IH_E to _ _ _ Ev1. search.

Prove looseEval:host:paramName_is.
Prove looseEval:host:getFunEvalInfo_is.
Prove looseEval:host:evalProgram_isOutput.

Prove looseEval:host:evalStmt_names_same.
IsEE: case IsEE. apply names_same_reflexive to IsEE1. search.

Add_Ext_Size looseEval:host:evalExpr,
             looseEval:host:evalArgs,
             looseEval:host:evalRecFields,
             looseEval:host:evalStmt.
Add_Proj_Rel looseEval:host:evalExpr,
             looseEval:host:evalArgs,
             looseEval:host:evalRecFields,
             looseEval:host:evalStmt.

Prove looseEval:host:evalExpr_rel,
      looseEval:host:evalStmt_newNameScopes_output,
      looseEval:host:evalStmt_newNameScopes,
      looseEval:host:evalArgs_rel,
      looseEval:host:evalRecFields_rel.
%evalStmt_newNameScopes_output
 NNS': assert newNameScopes N Len (Scope::EE_A) (Scope::EE_B).
 Is: case IsS. Vars: apply vars_exist to Is. EvB: case EvB.
 apply IH_E to _ _ _ _ EvA1 EvB Vars _.
   intros M L. apply vars_is to _ Vars. apply mem_is_string to _ M.
   apply newNameScopes_lookupScopes to _ _ NNS' L. search.
 search.
%evalStmt_newNameScopes
 case EvB. search.

Prove looseEval:host:evalExpr_rel_exists_ES,
      looseEval:host:evalStmt_newNameScopes_exists_ES,
      looseEval:host:evalArgs_rel_exists_ES,
      looseEval:host:evalRecFields_rel_exists_ES.
 NNS': assert newNameScopes N Len (Scope::EE_A) (Scope::EE_B).
 Is: case IsS. Vars: apply vars_exist to Is.
 apply IH_E to _ _ _ _ EvB2 Vars _ with EE_A = Scope::EE_A.
   intros M L. apply vars_is to _ Vars. apply mem_is_string to _ M.
   apply newNameScopes_lookupScopes to _ _ NNS' L. search.
 search.

Prove looseEval:host:evalExpr_scopes_same,
      looseEval:host:evalStmt_scopes_same,
      looseEval:host:evalStmt_scopes_same_ctx,
      looseEval:host:evalArgs_scopes_same,
      looseEval:host:evalRecFields_scopes_same.
%evalStmt_scopes_same
 case IsS. EvB: case EvB. apply IH_E to _ _ _ _ _ EvA1 EvB. search.
%evalStmt_scopes_same_ctx
 case EvB. search.

Prove looseEval:host:evalExpr_scopes_same_exists,
      looseEval:host:evalStmt_scopes_same_exists,
      looseEval:host:evalArgs_scopes_same_exists,
      looseEval:host:evalRecFields_scopes_same_exists.
case IsS. apply IH_E to _ _ _ _ SS EvA1. search.

Prove_Constraint looseEval:host:proj_evalExpr_exists.

Theorem append_nil_output : forall O,
  is_list is_value O -> O ++ [] = O.
induction on 1. intros Is. Is: case Is.
  %nil
   search.
  %cons
   apply IH to Is1. search.

Prove_Constraint looseEval:host:proj_evalStmt_exists.
Ev: case Ev. case IsS. IsO: apply evalExpr_isOutput to _ _ _ Ev.
apply append_nil_output to IsO. search.

Prove_Constraint looseEval:host:proj_evalStmt_rel.
case Ev. Ev_P: case Ev_P.
  %E-If-True
   Ev_P: case Ev_P1. backchain scopes_same_reflexive.
  %E-If-False
   Ev_P: case Ev_P1. case Ev_P1. case Ev_P1. case Ev_P1. case Ev_P1.

Prove_Ext_Ind looseEval:host:evalExpr,
              looseEval:host:evalArgs,
              looseEval:host:evalRecFields,
              looseEval:host:evalStmt.
case IsS. apply ext_size_is_int_evalExpr to R2. Acc: case Acc.
L: apply lt_plus_one to R1 _. apply ext_size_pos_evalExpr to R2.
A: apply Acc to _ L. apply IH to R2 A _ _ _ .
Ev: apply drop_ext_size_evalExpr to R2.
IsO: apply evalExpr_isOutput to _ _ _ Ev. apply names_exists to IsEE.
apply append_nil_output to IsO. search.

Prove looseEval:host:paramName_unique.
Prove_Constraint looseEval:host:proj_paramName_forward.
Prove_Constraint looseEval:host:proj_paramName_back.
Prove looseEval:host:getFunEvalInfo_unique.
Prove_Constraint looseEval:host:proj_getFunEvalInfo_forward.
Prove_Constraint looseEval:host:proj_getFunEvalInfo_back.
Prove looseEval:host:evalProgram_unique.
Prove_Constraint looseEval:host:proj_evalProgram.
Prove_Constraint looseEval:host:proj_evalProgram_back.


Prove looseEval:host:evalExpr_typePres,
      looseEval:host:evalStmt_typePres,
      looseEval:host:evalArgs_typePres,
      looseEval:host:evalRecFields_typePres.
case Ty. search.

Prove looseEval:host:paramTy_paramName_same.
Prove looseEval:host:funOK_getFunEvalInfo_related.


Prove looseEval:host:evalExpr_output_forms,
      looseEval:host:evalStmt_output_forms,
      looseEval:host:evalArgs_output_forms,
      looseEval:host:evalRecFields_output_forms.
case IsS. apply IH_E to _ _ _ Ev1. search.

Prove looseEval:host:evalProgram_output_forms.
Prove looseEval:host:paramName_exists.
Prove looseEval:host:getFunEvalInfo_exists.
