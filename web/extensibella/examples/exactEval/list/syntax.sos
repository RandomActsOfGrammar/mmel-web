Module exactEval:list

Builds on exactEval:host

/*Expressions*/
expr ::= ...
       | nil(typ) /*need type for type uniqueness*/
       | cons(expr, expr)
       | head(expr)
       | tail(expr)
       | null(expr)
       | index(expr, expr) /*lst[i]*/
       | length(expr)


------------------------------------------------------- [Proj-Nil]
Names |{expr}- nil(Ty) ~~>
               recBuild(consRecFieldExprs("null", true,
                        nilRecFieldExprs))


------------------------------------------------- [Proj-Cons]
Names |{expr}- cons(E1, E2) ~~>
         recBuild(
           consRecFieldExprs("null", false,
           consRecFieldExprs("head", E1,
           consRecFieldExprs("tail", E2,
                             nilRecFieldExprs))))


---------------------------------------------------- [Proj-Null]
Names |{expr}- null(E) ~~> recFieldAccess(E, "null")


---------------------------------------------------- [Proj-Head]
Names |{expr}- head(E) ~~> recFieldAccess(E, "head")


---------------------------------------------------- [Proj-Tail]
Names |{expr}- tail(E) ~~> recFieldAccess(E, "tail")


fresh_name "I" Names SaveI
fresh_name "L" Names SaveL
-------------------------------------------- [Proj-Index]
Names |{expr}- index(Lst, Index) ~~>
           stmtExpr(
              seq(declare(intTy, SaveL, Lst),
              seq(declare(intTy, SaveI, Index),
              /*kill it if the index is < 0;
                maintains eval back from proj*/
              seq(ifThenElse(greater(num(0), name(SaveI)),
                     printVal(errorExpr(stringLit("Die"), intTy)),
                     noop),
                  while(greater(name(SaveI), num(0)),
                     seq(assign(SaveL, recFieldAccess(name(SaveL),
                                                      "tail")),
                         assign(SaveI, minus(name(SaveI), num(1)))))))),
              recFieldAccess(name(SaveL), "head"))


fresh_name "L" Names SaveL
fresh_name "Len" Names Len
------------------------------ [Proj-Length]
Names |{expr}- length(E) ~~>
           stmtExpr(
              seq(declare(intTy, SaveL, E),
              seq(declare(intTy, Len, num(0)),
                  while(not(recFieldAccess(name(SaveL), "null")),
                     seq(assign(SaveL, recFieldAccess(name(SaveL),
                                                      "tail")),
                         assign(Len, plus(name(Len), num(1))))))),
              name(Len))




/*Statements*/
stmt ::= ...
       | listUpdate(string, expr, expr) /*lst[i] = e*/
       | listForeach(string, expr, stmt) /*foreach(x : l){ body }*/


fresh_name "I" L::Names SaveI
fresh_name "Hold" L::Names Hold
fresh_name "E" L::Names SaveE
fresh_name "C" L::Names Copy
---------------------------------------- [Proj-ListUpdate]
Names |{stmt}- listUpdate(L, I, E) ~~>
   scopeStmt(
      /*compute value of I for use in computation*/
      seq(declare(intTy, SaveI, I),
      /*save value of E to put in list later*/
      seq(declare(intTy, SaveE, E),
      /*this is to get the ctx into the right order for eval;
        after one run of the loop, SaveI will be before SaveE, and we
        want the order to be consistent for proofs*/
      seq(assign(SaveI, name(SaveI)),
      /*create a list for holding the things before place I;
        type does not matter, so long as it is declared*/
      seq(declare(intTy, Hold, nil(intTy)),
      /*pull I things off the front of L and hold them in stack Hold*/
      seq(while(and(not(eq(name(SaveI), num(0))),
                    not(null(name(L)))), /*check L didn't fake end*/
                seq(assign(SaveI, minus(name(SaveI), num(1))),
                seq(declare(intTy, Copy, name(L)),
                /*need to do this instead of cons to maintain any
                  other fields beyond head, tail, and null*/
                seq(recUpdate(Copy, ["tail"], name(Hold)),
                seq(assign(Hold, name(Copy)),
                    assign(L, tail(name(L)))))))),
      /*check for fake ending of L before the update location;
        kills execution if it is invalid*/
      seq(ifThenElse(null(name(L)),
             declare(intTy, Copy,
                     errorExpr(stringLit("Invalid update"), intTy)),
             noop),
      /*place the new value in position I, removing the old one*/
      seq(recUpdate(L, ["head"], name(SaveE)),
      /*place the old things back on list L from stack Hold*/
          while(not(null(name(Hold))),
                /*same as above; maintains any other fields*/
                seq(declare(intTy, Copy, name(Hold)),
                seq(recUpdate(Copy, ["tail"], name(L)),
                seq(assign(L, name(Copy)),
                    assign(Hold, tail(name(Hold)))))))))))))))
/*The purpose of checking whether L.null is true is to ensure we have
  the projection constraint for the back direction for evaluation,
  that the original evaluates if the projection does.  For this we
  need to know that we have L.null = false to build back the
  updateListIndex we need, which requires this for the sake of proving
  the corresponding forward version of the projection constraint.  Oh
  what a tangled web we weave when first we practice to prove
  projection constraints.*/
/*{
    int SaveI = I;
    int SaveE = E;
    SaveI = SaveI;
    int Hold = [];
    while SaveI != 0 && !null(L){
      SaveI = SaveI - 1;
      int Copy = L;
      Copy.tail = Hold;
      Hold = Copy;
      L = tail(L);
    }
    if null(L){
      int Copy = error("Invalid update");
    }
    else{}
    L = SaveE::tail(L);
    while !null(Hold){
      int Copy = Hold;
      Copy.tail = L;
      L = Copy;
      Hold = tail(Hold);
    }
  }*/


fresh_name "L" X::Names SaveL
----------------------------------------------- [Proj-ListForeach]
Names |{stmt}- listForeach(X, L, Body) ~~>
    scopeStmt(
       /*compute list for use in computation;
         as before, types don't matter*/
       seq(declare(intTy, SaveL, L),
           while(not(null(name(SaveL))),
              seq(declare(intTy, X, head(name(SaveL))),
              seq(assign(SaveL, tail(name(SaveL))),
                  Body)))))
/*{
    int SaveL = l;
    while !null(SaveL){
      int X = head(SaveL);
      SaveL = tail(SaveL);
      Body
    }
  }*/




/*Types*/
typ ::= ...
      | listTy(typ)


/*Strictly speaking, an empty list doesn't have the head or tail
  fields*/
--------------------------------------------- [Proj-ListTy]
|{typ}- listTy(T) ~~>
        recTy(consRecFieldTys("null", boolTy,
              consRecFieldTys("head", T,
              consRecFieldTys("tail", listTy(T),
              nilRecFieldTys))))
