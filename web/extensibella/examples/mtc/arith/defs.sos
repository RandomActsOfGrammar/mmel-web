Module mtc:arith

Builds on mtc:shared_declarations

e ::= ...
    | num(nat)
    | plus(e, e)

v ::= ...
    | numVal(nat)

ty ::= ...
     | natTy

nat ::= z | s(nat)
Projection nat :


--------------------- [T-Num]
typeOf G num(N) natTy


typeOf G E1 natTy
typeOf G E2 natTy
--------------------------- [T-Plus]
typeOf G plus(E1, E2) natTy



----------------------- [E-Num]
eval G num(N) numVal(N)


eval G E1 numVal(N1)
eval G E2 numVal(N2)
plusRel N1 N2 N
----------------------------- [E-Plus]
eval G plus(E1, E2) numVal(N)



Fixed Judgment plusRel : nat nat nat

============= [PR-Z]
plusRel z N N


plusRel N1 N2 N3
====================== [PR-S]
plusRel s(N1) N2 s(N3)



------------------------- [VT-NumVal]
valueType numVal(N) natTy



evalStep E1 E11
----------------------------------- [ES-Plus-Step1]
evalStep plus(E1, E2) plus(E11, E2)


value E1
evalStep E2 E21
----------------------------------- [ES-Plus-Step2]
evalStep plus(E1, E2) plus(E1, E21)


plusRel N1 N2 N
-------------------------------------- [ES-Plus-Add]
evalStep plus(num(N1), num(N2)) num(N)



------------ [V-Num]
value num(N)



----------------------- [S-Num]
subst X R num(N) num(N)


subst X R E1 E11
subst X R E2 E21
------------------------------------- [S-Plus]
subst X R plus(E1, E2) plus(E11, E21)



------------------ [C-NatTy]
canon natTy num(N)






--------------------- [Proj-Num]
|{e}- num(N) ~~> nilE


--------------------------- [Proj-Plus]
|{e}- plus(E1, E2) ~~> nilE


------------------------ [Proj-NumVal]
|{v}- numVal(N) ~~> nilV


---------------------- [Proj-NatTy]
|{ty}- natTy ~~> nilTy
