Module soundX:let.

Prove_Constraint soundX:host:proj_ty_is.


Prove soundX:host:type_is.
%T-Let
 Is: case IsT. apply IH to _ Is1 Ty1. apply IH to _ Is2 Ty2. search.


Prove_Constraint soundX:host:proj_is.
%Proj-Let
 case IsT. apply type_is to _ _ Proj1. search.


Prove soundX:host:type_unique.
%T-Let
 TyB: case TyB. case IsT. apply IH to _ _ TyA1 TyB.
 apply type_is to _ _ TyA1. apply IH to _ _ TyA2 TyB1. search.


Prove soundX:host:ty_lookup.
%T-Let
 apply IH to Ty1 L. apply IH to Ty2 _ with Ctx2 = (X, Ty1)::Ctx2.
   intros Lkp. Lkp: case Lkp.
     %Lkp-Here
      search.
     %Lkp-Later
      apply L to Lkp1. search.
 search.


Prove_Constraint soundX:host:proj_ty_unique.


Prove_Constraint soundX:host:proj_tm_unique.
%Proj-Let
 case Hyp1. case Hyp2. apply type_unique to _ _ Hyp4 H1. search.




Prove soundX:host:desugar_ty_exists.


Prove soundX:host:desugar_ty_rel.
%T-Let
 case IsT. DT: case DT. DT: case DT. DT: case DT1. DT: case DT1.
 apply type_unique to _ _ DT Ty1. apply IH to _ _ Ty1 _ _ _.
 apply type_is to _ _ Ty1. apply IH to _ _ Ty2 _ _ _. search.
 %clear impossible cases
 case DT1. case DT1.
